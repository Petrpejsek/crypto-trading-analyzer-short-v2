#!/usr/bin/env tsx
/**
 * Test script pro Entry Price Multiplier
 * Ovƒõ≈ôuje, ≈æe applyEntryMultiplier funguje spr√°vnƒõ
 */

import fs from 'node:fs'
import path from 'node:path'

// Simulace r≈Øzn√Ωch hodnot multiplieru
const testCases = [
  { multiplier: 100.0, entryPrice: 100.0, expected: 100.0, description: '≈Ω√°dn√° zmƒõna (100%)' },
  { multiplier: 100.5, entryPrice: 100.0, expected: 100.5, description: '+0.5%' },
  { multiplier: 101.0, entryPrice: 100.0, expected: 101.0, description: '+1.0%' },
  { multiplier: 99.5, entryPrice: 100.0, expected: 99.5, description: '-0.5%' },
  { multiplier: 105.0, entryPrice: 100.0, expected: 105.0, description: 'Max +5%' },
  { multiplier: 95.0, entryPrice: 100.0, expected: 95.0, description: 'Min -5%' },
  { multiplier: 100.5, entryPrice: 50000.0, expected: 50250.0, description: 'BTC p≈ô√≠klad +0.5%' },
]

async function runTests() {
  console.log('\nüß™ Entry Price Multiplier - Test Suite\n')
  
  const configPath = path.join(process.cwd(), 'config', 'trading.json')
  const originalConfig = fs.readFileSync(configPath, 'utf8')
  const config = JSON.parse(originalConfig)
  
  let passed = 0
  let failed = 0
  
  for (const testCase of testCases) {
    try {
      // Aktualizuj config
      config.ENTRY_PRICE_MULTIPLIER = testCase.multiplier
      fs.writeFileSync(configPath, JSON.stringify(config, null, 2) + '\n', 'utf8')
      
      // Importuj funkci (fresh import pro naƒçten√≠ nov√© hodnoty z configu)
      delete require.cache[require.resolve('../services/lib/entry_price_adjuster')]
      const { applyEntryMultiplier } = await import('../services/lib/entry_price_adjuster')
      
      // Spus≈• test
      const result = applyEntryMultiplier(testCase.entryPrice)
      const isMatch = Math.abs(result - testCase.expected) < 0.0001
      
      if (isMatch) {
        console.log(`‚úÖ ${testCase.description}`)
        console.log(`   ${testCase.entryPrice} ‚Üí ${result} (oƒçek√°v√°no: ${testCase.expected})`)
        passed++
      } else {
        console.log(`‚ùå ${testCase.description}`)
        console.log(`   ${testCase.entryPrice} ‚Üí ${result} (oƒçek√°v√°no: ${testCase.expected})`)
        failed++
      }
    } catch (e: any) {
      console.log(`‚ùå ${testCase.description} - ERROR: ${e.message}`)
      failed++
    }
  }
  
  // Obnov p≈Øvodn√≠ config
  fs.writeFileSync(configPath, originalConfig, 'utf8')
  
  console.log('\nüìä V√Ωsledky:')
  console.log(`   Passed: ${passed}/${testCases.length}`)
  console.log(`   Failed: ${failed}/${testCases.length}`)
  
  if (failed === 0) {
    console.log('\n‚ú® V≈°echny testy pro≈°ly!\n')
  } else {
    console.log('\n‚ö†Ô∏è  Nƒõkter√© testy selhaly!\n')
    process.exit(1)
  }
}

// Testy pro validaci
async function testValidation() {
  console.log('\nüõ°Ô∏è  Validaƒçn√≠ testy\n')
  
  const configPath = path.join(process.cwd(), 'config', 'trading.json')
  const originalConfig = fs.readFileSync(configPath, 'utf8')
  const config = JSON.parse(originalConfig)
  
  const invalidCases = [
    { multiplier: 110.0, description: 'P≈ô√≠li≈° vysok√Ω multiplier (110%)' },
    { multiplier: 90.0, description: 'P≈ô√≠li≈° n√≠zk√Ω multiplier (90%)' },
  ]
  
  for (const testCase of invalidCases) {
    config.ENTRY_PRICE_MULTIPLIER = testCase.multiplier
    fs.writeFileSync(configPath, JSON.stringify(config, null, 2) + '\n', 'utf8')
    
    delete require.cache[require.resolve('../services/lib/entry_price_adjuster')]
    const { applyEntryMultiplier } = await import('../services/lib/entry_price_adjuster')
    
    const result = applyEntryMultiplier(100.0)
    
    // Mƒõlo by vr√°tit p≈Øvodn√≠ hodnotu (100) kv≈Øli fallbacku
    if (result === 100.0) {
      console.log(`‚úÖ ${testCase.description} - spr√°vnƒõ odm√≠tnuto (fallback na 100)`)
    } else {
      console.log(`‚ùå ${testCase.description} - validace selhala! Vr√°ceno: ${result}`)
    }
  }
  
  // Obnov p≈Øvodn√≠ config
  fs.writeFileSync(configPath, originalConfig, 'utf8')
  console.log('')
}

// Spus≈• v≈°echny testy
runTests().then(() => testValidation()).catch(console.error)

